name: Terraform Deploy AWS

env:
  TFPath: tf/02_infra

on:
  push:
   branches: [ master ]
  pull_request:
   branches: [ master ]

jobs:
  validate:
    name: "Terraform Validate"
    runs-on: ubuntu-latest
    env:
      TF_VAR_PREFIX: "FORTINET-${{ github.run_id }}-${{ github.run_number }}"
      region: "eu-west-3"
      TF_VAR_USERNAME: "admin"
      TF_VAR_PASSWORD: "${{ secrets.PASSWORD }}"
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
      TF_VAR_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
      TF_VAR_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.1
          # cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
        working-directory: ${{ env.TFPath }}
###
  scan:
    name: scan
    runs-on: ubuntu-latest
    needs: [validate]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Change working dir
        working-directory: ${{ env.TFPath }}
        run: ls -la

      - name: Run Trivy vulnerability scanner in IaC mode
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          hide-progress: false
          format: 'table'
          output: 'trivy-results.txt'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
          skip-dirs: './00_remote_state,./01_aws_security'
        continue-on-error: true

      - name: Archive production artifacts
        id: upload_artifact
        uses: actions/upload-artifact@v3
        with:
          name: my-artifact-scan
          path: trivy-results.txt

###
  plan:
    name: "Terraform Plan"
    runs-on: ubuntu-latest
    needs: [scan]
    env:
      TF_VAR_PREFIX: "FORTINET-${{ github.run_id }}-${{ github.run_number }}"
      region: "eu-west-3"
      TF_VAR_USERNAME: "admin"
      TF_VAR_PASSWORD: "${{ secrets.PASSWORD }}"
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
      TF_VAR_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
      TF_VAR_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        
      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ${{ env.TFPath }}

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        working-directory: ${{ env.TFPath }}

      - name: Terraform Plan
        id: plan
#        if: github.event_name == 'pull_request'
        run: terraform plan -no-color -out plan.tfplan
        continue-on-error: true
        working-directory: ${{ env.TFPath }}

      - name: Archive production artifacts
        id: upload_artifact
        uses: actions/upload-artifact@v3
        with:
          name: my-artifact-tfplan
          path: ${{ env.TFPath }}/plan.tfplan

      - name: github issue
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}
        run: |
          gh auth setup-git
          gh issue create --title "issue" -b "demo "

      - name: Setup Infracost
        uses: infracost/actions/setup@v1
        with:
          api-key: ${{ secrets.INFRACOST_API_KEY }}

      - name: Generate Infracost JSON
        run: infracost breakdown --path plan.tfplan --format json --usage-file infracost-usage.yml --out-file /tmp/infracost.json
        working-directory: ${{ env.TFPath }}
        
      - name: Archive production artifacts
        id: upload_artifact_2
        uses: actions/upload-artifact@v3
        with:
          name: my-artifact-infracost
          path: /tmp/infracost.json
          
      - name: Post Infracost comment
        uses: infracost/actions/comment@v1
        with:
          path: /tmp/infracost.json
          behavior: update

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      #- name: Terraform Apply
      #  if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      #  run: terraform apply -auto-approve
      #  working-directory: ${{ env.TFPath }}
